#ifndef ORDER_INC_ORDER_LIB_KEYWORDS_H_VAJK20040620
#define ORDER_INC_ORDER_LIB_KEYWORDS_H_VAJK20040620

// (C) Copyright Vesa Karvonen 2004.
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE.)

#define ORDER_PP_TOKEN__Bool (_Bool)
#define ORDER_PP_TOKEN__Complex (_Complex)
#define ORDER_PP_TOKEN__Imaginary (_Imaginary)
#define ORDER_PP_TOKEN_asm (asm)
#define ORDER_PP_TOKEN_auto (auto)
#define ORDER_PP_TOKEN_bool (bool)
#define ORDER_PP_TOKEN_break (break)
#define ORDER_PP_TOKEN_case (case)
#define ORDER_PP_TOKEN_catch (catch)
#define ORDER_PP_TOKEN_char (char)
#define ORDER_PP_TOKEN_class (class)
#define ORDER_PP_TOKEN_const (const)
#define ORDER_PP_TOKEN_const_cast (const_cast)
#define ORDER_PP_TOKEN_continue (continue)
#define ORDER_PP_TOKEN_default (default)
#define ORDER_PP_TOKEN_delete (delete)
#define ORDER_PP_TOKEN_do (do)
#define ORDER_PP_TOKEN_double (double)
#define ORDER_PP_TOKEN_dynamic_cast (dynamic_cast)
#define ORDER_PP_TOKEN_else (else)
#define ORDER_PP_TOKEN_enum (enum)
#define ORDER_PP_TOKEN_explicit (explicit)
#define ORDER_PP_TOKEN_extern (extern)
#define ORDER_PP_TOKEN_false (false)
#define ORDER_PP_TOKEN_float (float)
#define ORDER_PP_TOKEN_for (for)
#define ORDER_PP_TOKEN_friend (friend)
#define ORDER_PP_TOKEN_goto (goto)
#define ORDER_PP_TOKEN_if (if)
#define ORDER_PP_TOKEN_inline (inline)
#define ORDER_PP_TOKEN_int (int)
#define ORDER_PP_TOKEN_long (long)
#define ORDER_PP_TOKEN_mutable (mutable)
#define ORDER_PP_TOKEN_namespace (namespace)
#define ORDER_PP_TOKEN_new (new)
#define ORDER_PP_TOKEN_operator (operator)
#define ORDER_PP_TOKEN_private (private)
#define ORDER_PP_TOKEN_protected (protected)
#define ORDER_PP_TOKEN_public (public)
#define ORDER_PP_TOKEN_register (register)
#define ORDER_PP_TOKEN_reinterpret_cast (reinterpret_cast)
#define ORDER_PP_TOKEN_restrict (restrict)
#define ORDER_PP_TOKEN_return (return)
#define ORDER_PP_TOKEN_short (short)
#define ORDER_PP_TOKEN_signed (signed)
#define ORDER_PP_TOKEN_sizeof (sizeof)
#define ORDER_PP_TOKEN_static (static)
#define ORDER_PP_TOKEN_static_cast (static_cast)
#define ORDER_PP_TOKEN_struct (struct)
#define ORDER_PP_TOKEN_switch (switch)
#define ORDER_PP_TOKEN_template (template)
#define ORDER_PP_TOKEN_this (this)
#define ORDER_PP_TOKEN_throw (throw)
#define ORDER_PP_TOKEN_true (true)
#define ORDER_PP_TOKEN_try (try)
#define ORDER_PP_TOKEN_typedef (typedef)
#define ORDER_PP_TOKEN_typeid (typeid)
#define ORDER_PP_TOKEN_typename (typename)
#define ORDER_PP_TOKEN_union (union)
#define ORDER_PP_TOKEN_unsigned (unsigned)
#define ORDER_PP_TOKEN_using (using)
#define ORDER_PP_TOKEN_virtual (virtual)
#define ORDER_PP_TOKEN_void (void)
#define ORDER_PP_TOKEN_volatile (volatile)
#define ORDER_PP_TOKEN_wchar_t (wchar_t)
#define ORDER_PP_TOKEN_while (while)

#define ORDER_PP_SYM__Bool(...) __VA_ARGS__
#define ORDER_PP_SYM__Complex(...) __VA_ARGS__
#define ORDER_PP_SYM__Imaginary(...) __VA_ARGS__
#define ORDER_PP_SYM_asm(...) __VA_ARGS__
#define ORDER_PP_SYM_auto(...) __VA_ARGS__
#define ORDER_PP_SYM_bool(...) __VA_ARGS__
#define ORDER_PP_SYM_break(...) __VA_ARGS__
#define ORDER_PP_SYM_case(...) __VA_ARGS__
#define ORDER_PP_SYM_catch(...) __VA_ARGS__
#define ORDER_PP_SYM_char(...) __VA_ARGS__
#define ORDER_PP_SYM_class(...) __VA_ARGS__
#define ORDER_PP_SYM_const(...) __VA_ARGS__
#define ORDER_PP_SYM_const_cast(...) __VA_ARGS__
#define ORDER_PP_SYM_continue(...) __VA_ARGS__
#define ORDER_PP_SYM_default(...) __VA_ARGS__
#define ORDER_PP_SYM_delete(...) __VA_ARGS__
#define ORDER_PP_SYM_do(...) __VA_ARGS__
#define ORDER_PP_SYM_double(...) __VA_ARGS__
#define ORDER_PP_SYM_dynamic_cast(...) __VA_ARGS__
#define ORDER_PP_SYM_else(...) __VA_ARGS__
#define ORDER_PP_SYM_enum(...) __VA_ARGS__
#define ORDER_PP_SYM_explicit(...) __VA_ARGS__
#define ORDER_PP_SYM_extern(...) __VA_ARGS__
#define ORDER_PP_SYM_false(...) __VA_ARGS__
#define ORDER_PP_SYM_float(...) __VA_ARGS__
#define ORDER_PP_SYM_for(...) __VA_ARGS__
#define ORDER_PP_SYM_friend(...) __VA_ARGS__
#define ORDER_PP_SYM_goto(...) __VA_ARGS__
#define ORDER_PP_SYM_if(...) __VA_ARGS__
#define ORDER_PP_SYM_inline(...) __VA_ARGS__
#define ORDER_PP_SYM_int(...) __VA_ARGS__
#define ORDER_PP_SYM_long(...) __VA_ARGS__
#define ORDER_PP_SYM_mutable(...) __VA_ARGS__
#define ORDER_PP_SYM_namespace(...) __VA_ARGS__
#define ORDER_PP_SYM_new(...) __VA_ARGS__
#define ORDER_PP_SYM_operator(...) __VA_ARGS__
#define ORDER_PP_SYM_private(...) __VA_ARGS__
#define ORDER_PP_SYM_protected(...) __VA_ARGS__
#define ORDER_PP_SYM_public(...) __VA_ARGS__
#define ORDER_PP_SYM_register(...) __VA_ARGS__
#define ORDER_PP_SYM_reinterpret_cast(...) __VA_ARGS__
#define ORDER_PP_SYM_restrict(...) __VA_ARGS__
#define ORDER_PP_SYM_return(...) __VA_ARGS__
#define ORDER_PP_SYM_short(...) __VA_ARGS__
#define ORDER_PP_SYM_signed(...) __VA_ARGS__
#define ORDER_PP_SYM_sizeof(...) __VA_ARGS__
#define ORDER_PP_SYM_static(...) __VA_ARGS__
#define ORDER_PP_SYM_static_cast(...) __VA_ARGS__
#define ORDER_PP_SYM_struct(...) __VA_ARGS__
#define ORDER_PP_SYM_switch(...) __VA_ARGS__
#define ORDER_PP_SYM_template(...) __VA_ARGS__
#define ORDER_PP_SYM_this(...) __VA_ARGS__
#define ORDER_PP_SYM_throw(...) __VA_ARGS__
#define ORDER_PP_SYM_true(...) __VA_ARGS__
#define ORDER_PP_SYM_try(...) __VA_ARGS__
#define ORDER_PP_SYM_typedef(...) __VA_ARGS__
#define ORDER_PP_SYM_typeid(...) __VA_ARGS__
#define ORDER_PP_SYM_typename(...) __VA_ARGS__
#define ORDER_PP_SYM_union(...) __VA_ARGS__
#define ORDER_PP_SYM_unsigned(...) __VA_ARGS__
#define ORDER_PP_SYM_using(...) __VA_ARGS__
#define ORDER_PP_SYM_virtual(...) __VA_ARGS__
#define ORDER_PP_SYM_void(...) __VA_ARGS__
#define ORDER_PP_SYM_volatile(...) __VA_ARGS__
#define ORDER_PP_SYM_wchar_t(...) __VA_ARGS__
#define ORDER_PP_SYM_while(...) __VA_ARGS__

#endif
